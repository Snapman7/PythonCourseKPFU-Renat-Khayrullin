import sqlite3
import csv
from datetime import datetime, date
import os


class ExpenseTracker:
    def __init__(self, db_name='expenses.db'):
        self.db_name = db_name
        self.categories = ['–µ–¥–∞', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–∂–∏–ª—å–µ', '–∑–¥–æ—Ä–æ–≤—å–µ', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–¥—Ä—É–≥–æ–µ']
        self.init_database()

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS expenses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                amount REAL NOT NULL,
                category TEXT NOT NULL,
                date TEXT NOT NULL,
                description TEXT,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()
        conn.close()

    def add_expense(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ —Ä–∞—Å—Ö–æ–¥–µ"""
        print("\n‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –†–ê–°–•–û–î–ê")

        try:
            amount = float(input("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞: "))
            if amount <= 0:
                print("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
                return
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!")
            return

        print("\nüìÇ –ö–ê–¢–ï–ì–û–†–ò–ò:")
        for i, category in enumerate(self.categories, 1):
            print(f"{i}. {category}")

        try:
            category_choice = int(input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (1-{len(self.categories)}): "))
            if 1 <= category_choice <= len(self.categories):
                category = self.categories[category_choice - 1]
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!")
                return
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞!")
            return

        # –î–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è)
        date_input = input("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î) –∏–ª–∏ Enter –¥–ª—è —Å–µ–≥–æ–¥–Ω—è: ").strip()
        if date_input:
            try:
                expense_date = datetime.strptime(date_input, '%Y-%m-%d').date()
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞.")
                expense_date = date.today()
        else:
            expense_date = date.today()

        description = input("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ").strip() or None

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO expenses (amount, category, date, description) VALUES (?, ?, ?, ?)',
            (amount, category, expense_date.isoformat(), description)
        )
        conn.commit()
        conn.close()

        print("‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

    def view_all_expenses(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        print("\nüìã –í–°–ï –†–ê–°–•–û–î–´")
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT * FROM expenses 
            ORDER BY date DESC, id DESC
        ''')
        expenses = cursor.fetchall()
        conn.close()

        self.display_expenses(expenses)

    def view_expenses_by_date(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –¥–∞—Ç–µ"""
        date_input = input("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î): ").strip()
        try:
            target_date = datetime.strptime(date_input, '%Y-%m-%d').date()
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!")
            return

        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute(
            'SELECT * FROM expenses WHERE date = ? ORDER BY id DESC',
            (target_date.isoformat(),)
        )
        expenses = cursor.fetchall()
        conn.close()

        print(f"\nüìÖ –†–ê–°–•–û–î–´ –ó–ê {target_date}:")
        self.display_expenses(expenses)

    def view_expenses_by_category(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        print("\nüìÇ –ö–ê–¢–ï–ì–û–†–ò–ò:")
        for i, category in enumerate(self.categories, 1):
            print(f"{i}. {category}")

        try:
            category_choice = int(input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (1-{len(self.categories)}): "))
            if 1 <= category_choice <= len(self.categories):
                category = self.categories[category_choice - 1]
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!")
                return
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞!")
            return

        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute(
            'SELECT * FROM expenses WHERE category = ? ORDER BY date DESC, id DESC',
            (category,)
        )
        expenses = cursor.fetchall()
        conn.close()

        print(f"\nüìÇ –†–ê–°–•–û–î–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–ò '{category.upper()}':")
        self.display_expenses(expenses)

    def display_expenses(self, expenses):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        if not expenses:
            print("–†–∞—Å—Ö–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        total = 0
        print(f"{'ID':<3} {'–î–∞—Ç–∞':<12} {'–ö–∞—Ç–µ–≥–æ—Ä–∏—è':<12} {'–°—É–º–º–∞':<10} {'–û–ø–∏—Å–∞–Ω–∏–µ':<20}")
        print("-" * 65)
        for expense in expenses:
            id, amount, category, expense_date, description, created_at = expense
            description_display = description if description else "‚Äî"
            print(f"{id:<3} {expense_date:<12} {category:<12} {amount:<10.2f} {description_display:<20}")
            total += amount

        print("-" * 65)
        print(f"{'–í–°–ï–ì–û:':<27} {total:<10.2f}")

    def get_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        # –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
        cursor.execute('SELECT SUM(amount) FROM expenses')
        total_amount = cursor.fetchone()[0] or 0

        # –°—É–º–º–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        cursor.execute('''
            SELECT category, SUM(amount) 
            FROM expenses 
            GROUP BY category 
            ORDER BY SUM(amount) DESC
        ''')
        category_totals = cursor.fetchall()

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = (date.today() - timedelta(days=30)).isoformat()
        cursor.execute('SELECT SUM(amount) FROM expenses WHERE date >= ?', (thirty_days_ago,))
        last_30_days = cursor.fetchone()[0] or 0

        conn.close()

        return {
            'total_amount': total_amount,
            'category_totals': category_totals,
            'last_30_days': last_30_days
        }

    def show_statistics(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = self.get_statistics()

        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–°–•–û–î–û–í")
        print("=" * 40)
        print(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: {stats['total_amount']:.2f}")
        print(f"üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: {stats['last_30_days']:.2f}")

        print("\nüìÇ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        for category, amount in stats['category_totals']:
            percentage = (amount / stats['total_amount']) * 100 if stats['total_amount'] > 0 else 0
            print(f"  {category:<12}: {amount:>8.2f} ({percentage:>5.1f}%)")

    def export_to_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ CSV"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM expenses ORDER BY date, category')
        expenses = cursor.fetchall()
        conn.close()

        filename = f"expenses_export_{date.today()}.csv"

        with open(filename, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['ID', 'Amount', 'Category', 'Date', 'Description', 'Created At'])
            writer.writerows(expenses)

        print(f"‚úÖ –†–∞—Å—Ö–æ–¥—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")

    def show_menu(self):
        print("\n" + "=" * 50)
        print("üí∞ –î–ù–ï–í–ù–ò–ö –†–ê–°–•–û–î–û–í")
        print("=" * 50)
        print("1. ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
        print("2. üëÅÔ∏è  –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã")
        print("3. üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –¥–∞—Ç–µ")
        print("4. üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        print("5. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("6. üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV")
        print("0. ‚ùå –í—ã—Ö–æ–¥")
        print("=" * 50)

    def run(self):
        while True:
            self.show_menu()
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

            if choice == '0':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == '1':
                self.add_expense()
            elif choice == '2':
                self.view_all_expenses()
            elif choice == '3':
                self.view_expenses_by_date()
            elif choice == '4':
                self.view_expenses_by_category()
            elif choice == '5':
                self.show_statistics()
            elif choice == '6':
                self.export_to_csv()
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")


# –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
from datetime import timedelta

if __name__ == "__main__":
    tracker = ExpenseTracker()
    tracker.run()