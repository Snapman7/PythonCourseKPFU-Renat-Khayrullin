# -*- coding: utf-8 -*-
"""caLC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11UvXPlMPlVSdlHrJv6UWjKLxtDmSzSBO
"""

import os
import math

class Calculator:
    def __init__(self):
        self.history = []
        self.operations = {
            '1': {'name': '–°–ª–æ–∂–µ–Ω–∏–µ', 'func': self.add},
            '2': {'name': '–í—ã—á–∏—Ç–∞–Ω–∏–µ', 'func': self.subtract},
            '3': {'name': '–£–º–Ω–æ–∂–µ–Ω–∏–µ', 'func': self.multiply},
            '4': {'name': '–î–µ–ª–µ–Ω–∏–µ', 'func': self.divide},
            '5': {'name': '–í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å', 'func': self.power},
            '6': {'name': '–û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è', 'func': self.modulo},
            '7': {'name': '–¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ', 'func': self.floor_division}
        }

    def display_menu(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        print("\n" + "="*50)
        print("üßÆ –ö–û–ù–°–û–õ–¨–ù–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†")
        print("="*50)
        print("–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
        for key, value in self.operations.items():
            print(f"  {key}. {value['name']}")
        print("\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
        print("  8. üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π")
        print("  9. üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        print("  0. ‚ùå –í—ã—Ö–æ–¥")
        print("="*50)

    def get_number_input(self, prompt):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        while True:
            try:
                return float(input(prompt))
            except ValueError:
                print("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

    def get_menu_choice(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é"""
        while True:
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é (0-9): ").strip()
            if choice in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:
                return choice
            else:
                print("‚ùå –û—à–∏–±–∫–∞: –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –æ—Ç 0 –¥–æ 9!")

    def add_to_history(self, operation, num1, num2, result):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        history_entry = f"{num1} {operation} {num2} = {result}"
        self.history.append(history_entry)
        return history_entry

    # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    def add(self, a, b):
        return a + b

    def subtract(self, a, b):
        return a - b

    def multiply(self, a, b):
        return a * b

    def divide(self, a, b):
        if b == 0:
            raise ZeroDivisionError("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!")
        return a / b

    def power(self, a, b):
        return a ** b

    def modulo(self, a, b):
        if b == 0:
            raise ZeroDivisionError("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!")
        return a % b

    def floor_division(self, a, b):
        if b == 0:
            raise ZeroDivisionError("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!")
        return a // b

    def perform_operation(self, choice):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        operation_info = self.operations[choice]
        operation_name = operation_info['name']
        operation_func = operation_info['func']

        print(f"\n--- {operation_name} ---")
        num1 = self.get_number_input("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: ")
        num2 = self.get_number_input("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: ")

        try:
            result = operation_func(num1, num2)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            operation_symbols = {
                '1': '+', '2': '-', '3': '*', '4': '/',
                '5': '^', '6': '%', '7': '//'
            }

            history_entry = self.add_to_history(
                operation_symbols[choice], num1, num2, result
            )

            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {history_entry}")

        except ZeroDivisionError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    def show_history(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π"""
        print("\n" + "="*50)
        print("üìã –ò–°–¢–û–†–ò–Ø –û–ü–ï–†–ê–¶–ò–ô")
        print("="*50)

        if not self.history:
            print("–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞")
        else:
            for i, entry in enumerate(self.history, 1):
                print(f"{i}. {entry}")

        print(f"\n–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(self.history)}")
        print("="*50)

    def clear_history(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π"""
        self.history.clear()
        print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –æ—á–∏—â–µ–Ω–∞!")

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä!")

        while True:
            self.display_menu()
            choice = self.get_menu_choice()

            if choice == '0':
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞!")
                break
            elif choice in ['1', '2', '3', '4', '5', '6', '7']:
                self.perform_operation(choice)
            elif choice == '8':
                self.show_history()
            elif choice == '9':
                self.clear_history()

            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º
            if choice != '0':
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    calculator = Calculator()
    calculator.run()

if __name__ == "__main__":
    main()