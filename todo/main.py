import sqlite3
from datetime import datetime
import os


class TaskManager:
    def __init__(self, db_name='todo.db'):
        self.db_name = db_name
        self.init_database()

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS tasks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                description TEXT NOT NULL,
                created_at TEXT NOT NULL,
                completed BOOLEAN NOT NULL DEFAULT FALSE,
                completed_at TEXT
            )
        ''')
        conn.commit()
        conn.close()

    def add_task(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        print("\n‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ô –ó–ê–î–ê–ß–ò")
        description = input("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ").strip()

        if not description:
            print("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return

        created_at = datetime.now().isoformat()

        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO tasks (description, created_at) VALUES (?, ?)',
            (description, created_at)
        )
        conn.commit()
        conn.close()

        print("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

    def view_tasks(self, show_completed=True):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        if show_completed:
            cursor.execute('''
                SELECT * FROM tasks 
                ORDER BY completed, created_at DESC
            ''')
        else:
            cursor.execute('''
                SELECT * FROM tasks 
                WHERE completed = FALSE 
                ORDER BY created_at DESC
            ''')

        tasks = cursor.fetchall()
        conn.close()

        return tasks

    def display_tasks(self, tasks):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
        if not tasks:
            print("üìù –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        print(f"\n{'ID':<3} {'–°—Ç–∞—Ç—É—Å':<8} {'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è':<20} {'–û–ø–∏—Å–∞–Ω–∏–µ':<30}")
        print("-" * 70)

        for task in tasks:
            id, description, created_at, completed, completed_at = task

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            created_date = datetime.fromisoformat(created_at).strftime("%d.%m.%Y %H:%M")

            # –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            status = "‚úÖ [x]" if completed else "‚è≥ [ ]"

            print(f"{id:<3} {status:<8} {created_date:<20} {description:<30}")

    def mark_completed(self):
        """–û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"""
        tasks = self.view_tasks(show_completed=False)
        if not tasks:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏!")
            return

        self.display_tasks(tasks)

        try:
            task_id = int(input("\n–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π: "))
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!")
            return

        completed_at = datetime.now().isoformat()

        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute(
            'UPDATE tasks SET completed = TRUE, completed_at = ? WHERE id = ? AND completed = FALSE',
            (completed_at, task_id)
        )

        if cursor.rowcount > 0:
            print("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
        else:
            print("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")

        conn.commit()
        conn.close()

    def delete_task(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        tasks = self.view_tasks()
        if not tasks:
            print("‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            return

        self.display_tasks(tasks)

        try:
            task_id = int(input("\n–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: "))
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!")
            return

        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('DELETE FROM tasks WHERE id = ?', (task_id,))

        if cursor.rowcount > 0:
            print("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        else:
            print("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

        conn.commit()
        conn.close()

    def get_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞–¥–∞—á–∞–º"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        cursor.execute('SELECT COUNT(*) FROM tasks')
        total_tasks = cursor.fetchone()[0]

        cursor.execute('SELECT COUNT(*) FROM tasks WHERE completed = TRUE')
        completed_tasks = cursor.fetchone()[0]

        cursor.execute('SELECT COUNT(*) FROM tasks WHERE completed = FALSE')
        active_tasks = cursor.fetchone()[0]

        conn.close()

        return {
            'total': total_tasks,
            'completed': completed_tasks,
            'active': active_tasks,
            'completion_rate': (completed_tasks / total_tasks * 100) if total_tasks > 0 else 0
        }

    def show_statistics(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = self.get_statistics()

        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–î–ê–ß")
        print("=" * 30)
        print(f"üìù –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats['total']}")
        print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed']}")
        print(f"‚è≥ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']}")
        print(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {stats['completion_rate']:.1f}%")

    def show_menu(self):
        print("\n" + "=" * 50)
        print("‚úÖ –ú–ï–ù–ï–î–ñ–ï–† –ó–ê–î–ê–ß")
        print("=" * 50)
        print("1. üëÅÔ∏è  –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏")
        print("2. üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏")
        print("3. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
        print("4. ‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é")
        print("5. üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
        print("6. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("0. ‚ùå –í—ã—Ö–æ–¥")
        print("=" * 50)

    def run(self):
        while True:
            self.show_menu()
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

            if choice == '0':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == '1':
                tasks = self.view_tasks(show_completed=True)
                self.display_tasks(tasks)
            elif choice == '2':
                tasks = self.view_tasks(show_completed=False)
                self.display_tasks(tasks)
            elif choice == '3':
                self.add_task()
            elif choice == '4':
                self.mark_completed()
            elif choice == '5':
                self.delete_task()
            elif choice == '6':
                self.show_statistics()
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")


if __name__ == "__main__":
    manager = TaskManager()
    manager.run()