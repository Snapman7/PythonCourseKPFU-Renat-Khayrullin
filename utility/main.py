import os
import zipfile
import datetime
import logging
from pathlib import Path


class BackupUtility:
    def __init__(self):
        self.setup_logging()

    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('backup.log', encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)

    def get_user_input(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("\nüóÉÔ∏è –£–¢–ò–õ–ò–¢–ê –†–ï–ó–ï–†–í–ù–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 50)

        # –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞
        while True:
            source_dir = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–µ: ").strip()
            if os.path.exists(source_dir) and os.path.isdir(source_dir):
                break
            else:
                print("‚ùå –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        # –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        while True:
            backup_dir = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: ").strip()
            if os.path.exists(backup_dir) and os.path.isdir(backup_dir):
                break
            else:
                create = input("–ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞—Ç—å? (y/n): ").lower()
                if create == 'y':
                    try:
                        os.makedirs(backup_dir, exist_ok=True)
                        break
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {e}")
                else:
                    print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—É—Ç—å.")

        return source_dir, backup_dir

    def create_backup_name(self, source_dir):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –¥–ª—è –∞—Ä—Ö–∏–≤–∞"""
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        folder_name = os.path.basename(os.path.normpath(source_dir))
        return f"backup_{folder_name}_{timestamp}.zip"

    def get_total_size(self, source_dir):
        """–ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        total_size = 0
        for dirpath, dirnames, filenames in os.walk(source_dir):
            for filename in filenames:
                filepath = os.path.join(dirpath, filename)
                try:
                    total_size += os.path.getsize(filepath)
                except OSError:
                    continue
        return total_size

    def format_size(self, size_bytes):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size_bytes < 1024.0:
                return f"{size_bytes:.2f} {unit}"
            size_bytes /= 1024.0
        return f"{size_bytes:.2f} TB"

    def create_backup(self, source_dir, backup_path):
        """–°–æ–∑–¥–∞–Ω–∏–µ ZIP-–∞—Ä—Ö–∏–≤–∞"""
        total_size = self.get_total_size(source_dir)
        processed_size = 0

        self.logger.info(f"üöÄ –ù–∞—á–∞–ª–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {source_dir}")
        self.logger.info(f"üìÅ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {self.format_size(total_size)}")

        try:
            with zipfile.ZipFile(backup_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for root, dirs, files in os.walk(source_dir):
                    for file in files:
                        file_path = os.path.join(root, file)
                        arcname = os.path.relpath(file_path, source_dir)

                        try:
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                            file_size = os.path.getsize(file_path)
                            zipf.write(file_path, arcname)
                            processed_size += file_size

                            progress = (processed_size / total_size) * 100
                            print(
                                f"\rüì¶ –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}% ({self.format_size(processed_size)} / {self.format_size(total_size)})",
                                end="", flush=True)

                        except Exception as e:
                            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")

            print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {e}")
            return False

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —É—Ç–∏–ª–∏—Ç—ã"""
        try:
            source_dir, backup_dir = self.get_user_input()
            backup_name = self.create_backup_name(source_dir)
            backup_path = os.path.join(backup_dir, backup_name)

            print(f"\nüîç –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò:")
            print(f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {source_dir}")
            print(f"‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {backup_path}")
            print(f"‚Ä¢ –†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {self.format_size(self.get_total_size(source_dir))}")

            confirm = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏? (y/n): ").lower()
            if confirm != 'y':
                self.logger.info("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return

            print("\nüîÑ –°–û–ó–î–ê–ù–ò–ï –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò...")
            success = self.create_backup(source_dir, backup_path)

            if success:
                final_size = os.path.getsize(backup_path)
                self.logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
                self.logger.info(f"üìä –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: {self.format_size(final_size)}")

                print(f"\nüéâ –†–ï–ó–ï–†–í–ù–ê–Ø –ö–û–ü–ò–Ø –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–ê!")
                print(f"üìÅ –§–∞–π–ª: {backup_path}")
                print(f"üíæ –†–∞–∑–º–µ—Ä: {self.format_size(final_size)}")
                print(f"üìù –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: backup.log")
            else:
                self.logger.error("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
                print("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ backup.log –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")

        except KeyboardInterrupt:
            self.logger.info("‚ö†Ô∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            print("\n‚ö†Ô∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    utility = BackupUtility()
    utility.run()